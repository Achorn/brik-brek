{"version":3,"file":"index-CuuUB0X-.js","sources":["../../src/app.js"],"sourcesContent":["const canvasWidth = 1000;\nconst canvasHeight = 600;\nlet cursorPosX = canvasWidth / 2;\n//COLORS\nconst lightPink = \"#f0dede\";\nconst darkPink = \"#cf3673\";\nconst greyBlue = \"#748cbb\";\nlet canvas = document.querySelector(\"#my-canvas\");\nlet ctx = canvas.getContext(\"2d\");\n\nlet blocks = [];\nfor (let i = 0; i < 7; i++) {\n  for (let j = 0; j < 7; j++) {\n    blocks.push({\n      startX: 25 + i * 140,\n      startY: 25 + j * 50,\n      width: 100,\n      height: 20,\n      toDispose: false,\n      id: i + j,\n      color: greyBlue,\n    });\n  }\n}\nlet drawBlocks = () => {\n  blocks.forEach((block) => {\n    calculateCollisionSide(block);\n    ctx.fillStyle = block.color;\n    ctx.fillRect(block.startX, block.startY, block.width, block.height);\n  });\n};\n// ctx.clearRect(45, 45, 60, 60);\n// ctx.strokeRect(50, 50, 50, 50);\n\nlet paddle = {\n  startX: canvas.width + 150 * 0.5,\n  startY: canvas.height - 50,\n  width: 150,\n  height: 20,\n  toDispose: false,\n  color: greyBlue,\n  id: \"paddle\",\n};\nblocks.push(paddle);\nconst drawPaddle = () => {\n  ctx.fillStyle = paddle.color;\n  //   ctx.fillRect(\n  //     paddle.startX - paddle.width * 0.5,\n  //     canvas.height - 20 - 20,\n  //     paddle.width,\n  //     paddle.height\n  //   );\n};\n\nconst updatePaddle = () => {\n  paddle.startX = cursorPosX;\n  //find cursor position. and move it to there...\n};\n\nlet ball = {\n  radius: 20,\n  positionX: canvas.width / 2,\n  positionY: canvas.width / 2,\n  xDirection: 1,\n  yDirection: -1,\n  speed: 0.29,\n  color: darkPink,\n};\nball.positionY = canvas.height - ball.radius - 30;\n\nlet updateBall = (deltaTime) => {\n  ball.positionX += ball.speed * deltaTime * ball.xDirection;\n  ball.positionY += ball.speed * deltaTime * ball.yDirection;\n  // if (ball.positionY + ball.radius >= canvas.height) ball.yDirection = -1;\n  if (ball.positionY - ball.radius <= 0) ball.yDirection = +1;\n  if (ball.positionX + ball.radius >= canvas.width) ball.xDirection = -1;\n  if (ball.positionX - ball.radius <= 0) ball.xDirection = +1;\n};\n\nlet drawBall = () => {\n  ctx.beginPath();\n  ctx.arc(ball.positionX, ball.positionY, ball.radius, 0, 2 * Math.PI);\n  ctx.fillStyle = ball.color;\n  ctx.fill();\n  // ctx.stroke();\n};\n\nconst checkCollision = () => {\n  //have ball\n  // check every block to see if it is colliding with ball\n  blocks.forEach((block) => {\n    if (isColliding(block)) {\n      console.log(block.id);\n      let side = calculateCollisionSide(block);\n      if (side == 1) ball.yDirection = -ball.yDirection;\n      if (side == 2) ball.xDirection = -ball.xDirection;\n      if (side == 3) ball.xDirection = -ball.xDirection;\n      if (side == 4) ball.yDirection = -ball.yDirection;\n\n      if (block.id != \"paddle\") block.toDispose = true;\n      // ball.speed += 0.005;\n    }\n  });\n};\nconst isColliding = (block) => {\n  //X intersecting\n  // # Find the closest point on the square\n  let blockX = block.startX + block.width * 0.5;\n  let blockY = block.startY + block.height * 0.5;\n  let diff_x = ball.positionX - blockX;\n  let diff_y = ball.positionY - block.startY;\n\n  let closest_x =\n    blockX + Math.max(Math.min(diff_x, block.width / 2), -block.width / 2);\n  let closest_y =\n    blockY + Math.max(Math.min(diff_y, block.height / 2), -block.height / 2);\n\n  // # Calculate the distance\n  let distance = Math.sqrt(\n    (ball.positionX - closest_x) ** 2 + (ball.positionY - closest_y) ** 2\n  );\n  // # Check for collision\n  return distance <= ball.radius;\n};\nconst calculateCollisionSide = (block) => {\n  //lower quadrent\n  // between angle from center of block to lower left angle to andle of block to lower right angle\n  let blockCenter = {\n    x: block.startX + block.width * 0.5,\n    y: block.startY + block.height * 0.5,\n  };\n  let ballAngle = Math.atan2(\n    blockCenter.x - ball.positionX,\n    blockCenter.y - ball.positionY\n  );\n\n  let bottomLeftPosition = { x: block.startX, y: block.startY + block.height };\n  let bottomRightPosition = {\n    x: block.startX + block.width,\n    y: block.startY + block.height,\n  };\n\n  let topLeftPosition = { x: block.startX, y: block.startY };\n  let topRightPosition = {\n    x: block.startX + block.width,\n    y: block.startY,\n  };\n\n  let bottomLeftAngle = Math.atan2(\n    blockCenter.x - bottomLeftPosition.x,\n    blockCenter.y - bottomLeftPosition.y\n  );\n\n  let bottomRightAngle = Math.atan2(\n    blockCenter.x - bottomRightPosition.x,\n    blockCenter.y - bottomRightPosition.y\n  );\n\n  let topLefttAngle = Math.atan2(\n    blockCenter.x - topLeftPosition.x,\n    blockCenter.y - topLeftPosition.y\n  );\n\n  let topRightAngle = Math.atan2(\n    blockCenter.x - topRightPosition.x,\n    blockCenter.y - topRightPosition.y\n  );\n  let angle = 4;\n\n  if (ballAngle > bottomLeftAngle || ballAngle < bottomRightAngle) {\n    // Bottom\n    angle = 1;\n    block.color = greyBlue;\n  } else if (ballAngle > topLefttAngle && ballAngle < bottomLeftAngle) {\n    // Left\n    angle = 2;\n    block.color = darkPink;\n  } else if (ballAngle > bottomRightAngle && ballAngle < topRightAngle) {\n    // Right\n    angle = 3;\n    block.color = darkPink;\n  } else {\n    // Top\n    block.color = greyBlue;\n  }\n  return angle;\n};\n\ncanvas.addEventListener(\"mousemove\", (event) => {\n  const rect = canvas.getBoundingClientRect(); // Get canvas position relative to viewport\n  const x = event.clientX - rect.left; // Calculate mouse position relative to canvas\n  cursorPosX = x - paddle.width * 0.5;\n  const y = event.clientY - rect.top;\n  // console.log(Math.atan2(canvas.width * 0.5 - x, canvas.height * 0.5 - y));\n});\nconst disposeBlocks = () => {\n  blocks = blocks.filter((block) => !block.toDispose);\n};\n\nlet lastTime = 16;\nlet gameLoop = (currentTime) => {\n  // Calculate deltaTime in milliseconds\n  const deltaTime = currentTime - lastTime;\n  if (deltaTime) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    checkCollision();\n    updatePaddle(deltaTime);\n    updateBall(deltaTime);\n    disposeBlocks();\n\n    drawPaddle();\n    drawBlocks();\n    drawBall();\n    // Store the current time for the next frame\n    lastTime = currentTime;\n  }\n  requestAnimationFrame(gameLoop);\n};\n\ngameLoop();\n"],"names":["canvasWidth","cursorPosX","darkPink","greyBlue","canvas","ctx","blocks","i","j","drawBlocks","block","calculateCollisionSide","paddle","drawPaddle","updatePaddle","ball","updateBall","deltaTime","drawBall","checkCollision","isColliding","side","blockX","blockY","diff_x","diff_y","closest_x","closest_y","blockCenter","ballAngle","bottomLeftPosition","bottomRightPosition","topLeftPosition","topRightPosition","bottomLeftAngle","bottomRightAngle","topLefttAngle","topRightAngle","angle","event","rect","disposeBlocks","lastTime","gameLoop","currentTime"],"mappings":"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"}