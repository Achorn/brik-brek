{"version":3,"file":"index-BzzFwWQO.js","sources":["../../src/app.js"],"sourcesContent":["const canvasWidth = 1000;\nconst canvasHeight = 700;\nlet cursorPosX = canvasWidth / 2;\n//COLORS\nconst lightPink = \"#f0dede\";\nconst darkPink = \"#cf3673\";\nconst greyBlue = \"#748cbb\";\n\nconst titleElement = document.querySelector(\"#title-container\");\nconst gameOverElement = document.querySelector(\"#game-over\");\nconst gameOverTitleElement = document.querySelector(\"#game-over-title\");\n\nconst scoreElement = document.querySelector(\"#score\");\n\nconst livesElement = document.querySelector(\"#lives\");\nlet score = 0;\nlet lives = 3;\nlet gamePad = { up: false, left: false, right: false, reset: false };\n\nlet canvas = document.querySelector(\"#my-canvas\");\nlet ctx = canvas.getContext(\"2d\");\nlet balls = [];\nlet ballSpeed = 0.45;\nlet blocks = [];\n\n// start, playing, pause game over\nlet state = \"START\";\nfor (let i = 0; i < 7; i++) {\n  for (let j = 0; j < 7; j++) {\n    let randomNum = Math.random();\n    let color =\n      randomNum < 0.333333\n        ? darkPink\n        : randomNum < 0.66666\n        ? \"#855c8c\"\n        : greyBlue;\n    blocks.push({\n      startX: 25 + i * 140,\n      startY: 25 + j * 50,\n      width: 100,\n      height: 20,\n      toDispose: false,\n      id: i + j,\n      color: color,\n      power: \"ball\",\n    });\n  }\n}\nlet centerOfBlock = (block) => {\n  return {\n    x: block.startX + block.width * 0.5,\n    y: block.startY + block.height * 0.5,\n  };\n};\nlet drawBlocks = () => {\n  blocks.forEach((block) => {\n    // calculateCollisionSide(block);\n    ctx.fillStyle = block.color;\n    ctx.fillRect(block.startX, block.startY, block.width, block.height);\n  });\n};\nlet activateBlockPower = (block) => {\n  if (!block.power) return;\n  let blockCenter = centerOfBlock(block);\n  let ball = {\n    radius: 15,\n    positionX: blockCenter.x,\n    positionY: blockCenter.y,\n    xDirection: 1,\n    yDirection: 1,\n    speed: ballSpeed,\n    color: block.color,\n    life: 1,\n    toDispose: false,\n  };\n  balls.push(ball);\n};\n// ctx.clearRect(45, 45, 60, 60);\n// ctx.strokeRect(50, 50, 50, 50);\n\nlet paddle = {\n  startX: canvas.width * 0.5 - 150 * 0.5,\n  startY: canvas.height - 50,\n  width: 150,\n  height: 20,\n  toDispose: false,\n  color: greyBlue,\n  id: \"paddle\",\n};\nblocks.push(paddle);\n\n// const drawPaddle = () => {\n//   ctx.fillStyle = paddle.color;\n//   //   ctx.fillRect(\n//   //     paddle.startX - paddle.width * 0.5,\n//   //     canvas.height - 20 - 20,\n//   //     paddle.width,\n//   //     paddle.height\n//   //   );\n// };\n\nconst updatePaddle = (deltaTime) => {\n  let direction = 0;\n  if (gamePad.left) direction -= 0.5 * deltaTime;\n  if (gamePad.right) direction += 0.5 * deltaTime;\n\n  paddle.startX = paddle.startX + direction;\n  if (paddle.startX <= 0) paddle.startX = 5;\n  if (paddle.startX + paddle.width >= canvas.width)\n    paddle.startX = canvas.width - paddle.width - 5;\n\n  //find cursor position. and move it to there...\n};\n\nlet primaryBall = {\n  radius: 15,\n  positionX: canvas.width / 2,\n  positionY: canvas.width / 2,\n  xDirection: 0,\n  yDirection: -1,\n  speed: ballSpeed,\n  color: \"white\",\n  life: 1,\n  toDispose: false,\n};\nprimaryBall.positionY = canvas.height - 80;\n\nballs.push(primaryBall);\n\nlet updateBalls = (deltaTime) => {\n  balls.forEach((ball) => updateBall(ball, deltaTime));\n};\nlet updateBall = (ball, deltaTime) => {\n  ball.positionX += ball.speed * deltaTime * ball.xDirection;\n  ball.positionY += ball.speed * deltaTime * ball.yDirection;\n  // if (ball.positionY + ball.radius >= canvas.height) ball.yDirection = -1;\n  if (ball.positionY - ball.radius <= 0)\n    ball.yDirection = Math.abs(ball.yDirection);\n  if (ball.positionX + ball.radius >= canvas.width)\n    ball.xDirection = -Math.abs(ball.xDirection);\n  if (ball.positionX - ball.radius <= 0)\n    ball.xDirection = Math.abs(ball.xDirection);\n\n  //out of bounds\n  if (ball.positionY - ball.radius > canvas.height) {\n    ball.toDispose = true;\n  }\n};\n\nlet drawBalls = () => {\n  balls.forEach((ball) => drawBall(ball));\n};\nlet drawBall = (ball) => {\n  ctx.beginPath();\n  ctx.arc(ball.positionX, ball.positionY, ball.radius, 0, 2 * Math.PI);\n  ctx.fillStyle = ball.color;\n  ctx.fill();\n  // ctx.stroke();\n};\nconst disposeBalls = () => {\n  balls = balls.filter((ball) => !ball.toDispose);\n};\n\nconst checkCollision = () => {\n  //have ball\n  // check every block to see if it is colliding with ball\n  blocks.forEach((block) => {\n    balls.forEach((ball) => {\n      if (isColliding(block, ball)) {\n        let side = calculateCollisionSide(block, ball);\n        if (side == 1) ball.yDirection = 1; //bottom\n        if (side == 2) ball.xDirection = -1; //left\n        if (side == 3) ball.xDirection = 1; //right\n        if (side == 4) ball.yDirection = -1; //top\n        if (block.id != \"paddle\") {\n          activateBlockPower(block);\n          block.toDispose = true;\n          score += 50;\n        } else {\n          //calculate ball angle hitting paddle\n\n          let blockSurface = {\n            start: block.startX,\n            end: block.startX + block.width,\n            center: block.startX + block.width * 0.5,\n          };\n          let frac = ball.positionX - blockSurface.start;\n          let center = blockSurface.center - blockSurface.start;\n          let angle = (frac - center) / block.width;\n          let distanceFromCenter = (frac - center) / block.width;\n          distanceFromCenter = Math.max(-0.3, distanceFromCenter);\n          distanceFromCenter = Math.min(0.3, distanceFromCenter);\n          distanceFromCenter *= 2;\n\n          distanceFromCenter *= 90;\n          distanceFromCenter <= 0\n            ? (distanceFromCenter += 90)\n            : (distanceFromCenter -= 90);\n          // distanceFromCenter = -distanceFromCenter;\n\n          // ball position\n          // convert to angle from 0-180\n          // angle = 180 - (distanceFromCenter + 0.5) * 180;\n          let direction = distanceFromCenter <= 0 ? 1 : -1;\n          let alpha = Math.abs(distanceFromCenter);\n          let c = 1;\n          const alphaRad = (alpha * Math.PI) / 180;\n\n          // Calculate side a\n          const a = c * Math.sin(alphaRad);\n\n          // Calculate side b\n          const b = c * Math.cos(alphaRad);\n\n          // paddle position\n          // normalize or whatever\n          // generate angle with window of tolerance\n          ball.xDirection = b * direction;\n          ball.yDirection = -a;\n        }\n        // ball.speed += 0.005;\n      }\n    });\n  });\n};\nconst isColliding = (block, ball) => {\n  //X intersecting\n  // # Find the closest point on the square\n  let blockCenter = centerOfBlock(block);\n  let blockX = blockCenter.x;\n  let blockY = blockCenter.y;\n  let diff_x = ball.positionX - blockX;\n  let diff_y = ball.positionY - block.startY;\n\n  let closest_x =\n    blockX + Math.max(Math.min(diff_x, block.width / 2), -block.width / 2);\n  let closest_y =\n    blockY + Math.max(Math.min(diff_y, block.height / 2), -block.height / 2);\n\n  // # Calculate the distance\n  let distance = Math.sqrt(\n    (ball.positionX - closest_x) ** 2 + (ball.positionY - closest_y) ** 2\n  );\n  // # Check for collision\n  return distance <= ball.radius;\n};\nconst calculateCollisionSide = (block, ball) => {\n  //lower quadrent\n  // between angle from center of block to lower left angle to andle of block to lower right angle\n  let blockCenter = {\n    x: block.startX + block.width * 0.5,\n    y: block.startY + block.height * 0.5,\n  };\n  let ballAngle = Math.atan2(\n    blockCenter.x - ball.positionX,\n    blockCenter.y - ball.positionY\n  );\n\n  let bottomLeftPosition = { x: block.startX, y: block.startY + block.height };\n  let bottomRightPosition = {\n    x: block.startX + block.width,\n    y: block.startY + block.height,\n  };\n\n  let topLeftPosition = { x: block.startX, y: block.startY };\n  let topRightPosition = {\n    x: block.startX + block.width,\n    y: block.startY,\n  };\n\n  let bottomLeftAngle = Math.atan2(\n    blockCenter.x - bottomLeftPosition.x,\n    blockCenter.y - bottomLeftPosition.y\n  );\n\n  let bottomRightAngle = Math.atan2(\n    blockCenter.x - bottomRightPosition.x,\n    blockCenter.y - bottomRightPosition.y\n  );\n\n  let topLefttAngle = Math.atan2(\n    blockCenter.x - topLeftPosition.x,\n    blockCenter.y - topLeftPosition.y\n  );\n\n  let topRightAngle = Math.atan2(\n    blockCenter.x - topRightPosition.x,\n    blockCenter.y - topRightPosition.y\n  );\n  let angle = 4;\n\n  if (ballAngle > bottomLeftAngle || ballAngle < bottomRightAngle) {\n    // Bottom\n    angle = 1;\n    // block.color = greyBlue;\n  } else if (ballAngle > topLefttAngle && ballAngle < bottomLeftAngle) {\n    // Left\n    angle = 2;\n    // block.color = darkPink;\n  } else if (ballAngle > bottomRightAngle && ballAngle < topRightAngle) {\n    // Right\n    angle = 3;\n    // block.color = darkPink;\n  } else {\n    // Top\n    // block.color = greyBlue;\n  }\n  return angle;\n};\ndocument.addEventListener(\"keydown\", (e) => {\n  if (state === \"START\") state = \"PLAYING\";\n  if (e.code === \"ArrowLeft\") {\n    gamePad.left = true;\n  }\n  if (e.code === \"ArrowRight\") {\n    gamePad.right = true;\n  }\n  if (e.code === \"ArrowUp\") {\n    gamePad.up = true;\n  }\n  if (e.code === \"KeyR\") {\n    gamePad.reset = true;\n  }\n});\ndocument.addEventListener(\"keyup\", (e) => {\n  if (e.code === \"ArrowLeft\") {\n    gamePad.left = false;\n  }\n  if (e.code === \"ArrowRight\") {\n    gamePad.right = false;\n  }\n  if (e.code === \"ArrowUp\") {\n    gamePad.up = false;\n  }\n\n  if (e.code === \"KeyR\") {\n    gamePad.reset = false;\n  }\n});\n\n// canvas.addEventListener(\"mousemove\", (event) => {\n//   const rect = canvas.getBoundingClientRect(); // Get canvas position relative to viewport\n//   const x = event.clientX - rect.left; // Calculate mouse position relative to canvas\n//   cursorPosX = x - paddle.width * 0.5;\n//   const y = event.clientY - rect.top;\n// });\nconst disposeBlocks = () => {\n  blocks = blocks.filter((block) => !block.toDispose);\n};\nconst updateScore = () => {\n  scoreElement.innerHTML = score;\n};\n\nlet lastTime = 16;\nlet gameLoop = (currentTime) => {\n  // Calculate deltaTime in milliseconds\n  const deltaTime = currentTime - lastTime;\n\n  if (deltaTime) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    checkCollision();\n\n    if (state == \"PLAYING\") {\n      titleElement.style.display = \"none\";\n      updatePaddle(deltaTime);\n      updateBalls(deltaTime);\n      disposeBlocks();\n      disposeBalls();\n\n      if (blocks.length == 1) {\n        state = \"OVER\";\n        gameOverElement.style.display = \"flex\";\n      }\n      if (balls.length == 0) {\n        if (lives === 0) {\n          state = \"OVER\";\n          gameOverElement.style.display = \"flex\";\n        } else {\n          console.log(\"removing life \");\n          lives -= 1;\n          livesElement.innerHTML = lives;\n          balls.push({\n            radius: 15,\n            positionX: canvas.width / 2,\n            positionY: canvas.width / 2,\n            xDirection: 0,\n            yDirection: -1,\n            speed: ballSpeed,\n            color: \"white\",\n            life: 1,\n            toDispose: false,\n          });\n        }\n      }\n    }\n    if (state == \"OVER\") {\n      if (gamePad.reset) location.reload();\n    }\n\n    // drawPaddle();\n    drawBlocks();\n    drawBalls();\n    updateScore();\n    // Store the current time for the next frame\n    lastTime = currentTime;\n  }\n  requestAnimationFrame(gameLoop);\n};\n\ngameLoop();\n"],"names":["darkPink","greyBlue","titleElement","gameOverElement","scoreElement","livesElement","score","lives","gamePad","canvas","ctx","balls","ballSpeed","blocks","state","i","j","randomNum","color","centerOfBlock","block","drawBlocks","activateBlockPower","blockCenter","ball","paddle","updatePaddle","deltaTime","direction","primaryBall","updateBalls","updateBall","drawBalls","drawBall","disposeBalls","checkCollision","isColliding","side","calculateCollisionSide","blockSurface","frac","center","distanceFromCenter","alpha","c","alphaRad","a","b","blockX","blockY","diff_x","diff_y","closest_x","closest_y","ballAngle","bottomLeftPosition","bottomRightPosition","topLeftPosition","topRightPosition","bottomLeftAngle","bottomRightAngle","topLefttAngle","topRightAngle","angle","e","disposeBlocks","updateScore","lastTime","gameLoop","currentTime"],"mappings":"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"}